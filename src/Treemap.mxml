<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="dataLoader.send();" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:data="org.juicekit.data.*" xmlns:controls="org.juicekit.controls.*">
	
	<fx:Script>
		<![CDATA[
			import flare.vis.data.Data;
			import flare.vis.data.DataSprite;
			import flare.vis.data.NodeSprite;
			import flare.vis.data.Tree;
			import flare.vis.operator.encoder.PropertyEncoder;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import org.juicekit.data.converter.DelimitedTextConverter;
			import org.juicekit.events.DataMouseEvent;
			import org.juicekit.query.methods.*;
			import org.juicekit.util.GraphUtil;
			import org.juicekit.util.Strings;
			
			private var d:Array;
			
			[Bindable] private var levelOrder:ArrayCollection =  new ArrayCollection(['AGE', 'SEX', 'STATE']);
			
			
			/**
			 * Parse the CSV data loaded from the server.
			 */
			public function resultHandler(event:ResultEvent):void {
				d = new DelimitedTextConverter(',').parse(event.result as String).nodes.data;
				/*
				The raw data looks like this:
				
				STATE,SEX,AGE,POP2000,POP2008
				Alabama,M,0,30479,32055
				Alabama,M,1,29904,32321
				Alabama,M,2,30065,31789
				Alabama,M,3,29932,31371
				Alabama,M,4,30319,31164
				Alabama,M,5,31127,31049
				Alabama,M,6,31466,30960
				*/
				
				// Group the ages into 10 year bands to reduce data size
				for each (var o:Object in d) {
					if (o.AGE < 10) {
						o.AGE = '0-9';
					} else if (o.AGE < 20) {
						o.AGE = '10-19';
					} else if (o.AGE < 30) {
						o.AGE = '20-29';
					} else if (o.AGE < 40) {
						o.AGE = '30-39';
					} else if (o.AGE < 50) {
						o.AGE = '40-49';
					} else if (o.AGE < 60) {
						o.AGE = '50-59';
					} else if (o.AGE < 70) {
						o.AGE = '60-69';
					} else if (o.AGE < 80) {
						o.AGE = '70-79';
					} else if (o.AGE < 90) {
						o.AGE = '80+';
					}
				}
				d = select('AGE', 'STATE', 'SEX', {POP2000: sum('POP2000')}, {POP2008: sum('POP2008')}).groupby('AGE', 'STATE', 'SEX').eval(d);

				generateTreemapData();
			}
			
			
			/**
			 * Generate a treemap using the data previously loading into the array d.
			 */
			public function generateTreemapData():void {
				var t:Tree = GraphUtil.treeMap(d,                       // An array containing data 
											   levelOrder.source,       // The "levels" of the treemap
											   ['POP2000', 'POP2008',
											   {change: pctchange('POP2008', 'POP2000')},
											   ]); // The metrics
	
				// A few more metrics that can be added
//				{pctFemale: div(sum(iff(eq('SEX', _('F')),'POP2008',_(0))), sum('POP2008')) },
//				{avgAge: wtdaverage('AGE', 'POP2008')}
	
				treemap.data = t;
				
				
				// Add tooltips on rollover
				treemap.addEventListener(DataMouseEvent.MOUSE_OVER, function(e:DataMouseEvent):void {
					if ((e.dataSprite as NodeSprite).childDegree == 0) {
						selectedNode.htmlText = Strings.format("<b>State:</b> {0}<br/>" + 
							                                   "<b>Sex:</b> {1}<br/>" + 
															   "<b>Age:</b> {2}<br/>" + 
															   "<b>AvgAge:</b> {3:0.0}<br/>" + 
															   "<b>Pop. in 2000:</b> {4:#,##0}<br/>" +  
															   "<b>Pop. in 2008:</b> {5:#,##0} (size)<br/>" + 
															   "<b>Change:</b> {6:0.0%} (color)", 
															   e.data.STATE, e.data.SEX, e.data.AGE, e.data.avgAge, e.data.POP2000, e.data.POP2008, e.data.change);
					}
				});
				treemap.addEventListener(DataMouseEvent.MOUSE_OUT, function(e:DataMouseEvent):void {
					selectedNode.text = '';
				});
			}
			
			/**
			 * Handle reordering of the treemap levels.
			 */
			private function handleBtnReorder(event:DragEvent):void {
				// delay briefly to allow the move animation to complete
				setTimeout(function():void {
					generateTreemapData()
				}, 200);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:HTTPService id="dataLoader"
						url="http://media.juiceanalytics.com/census/CENSUS_STATEAGESEX.csv"
						method="GET"
						showBusyCursor="true"
						result="resultHandler(event)"
						resultFormat="text"/>
	</fx:Declarations>
	
	<fx:Style source="style.css"/>
	
	<s:VGroup width="100%" height="100%" paddingLeft="20" paddingTop="20" paddingRight="20" paddingBottom="20">
		<s:Label text="Population Growth by Age, Gender, and State" styleName="jkHeader"/>
		<s:Label text="This demo illustrates the features of the JuiceKit treemap. Source: US Census Bureau" styleName="jkBase"/>
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="Group by:"/>
			<s:List id="hl"
					dataProvider="{levelOrder}" 
					dragComplete="handleBtnReorder(event)" 
					dragMoveEnabled="true"
				    dropEnabled="true"
				    dragEnabled="true"
				    width="220" borderVisible="false"
				    selectionColor="#ffffff"
					>
				<s:layout>
					<s:HorizontalLayout gap="2"/>
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<s:Button label="{data}" width="60" height="20"/>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
			<s:Label text="Color by:"/>
			<s:ComboBox id="colorCmb" selectedIndex="0" dataProvider="{new ArrayCollection(['change', 'POP2000', 'POP2008'])}"/>
			<s:Label text="Size by:"/>
			<s:ComboBox id="sizeCmb" selectedIndex="0" dataProvider="{new ArrayCollection(['POP2000', 'POP2008'])}"/>
			<s:Label text="Color palette:"/>
			<s:ComboBox id="paletteCmb"
						 selectedIndex="0"
						 dataProvider="{new ArrayCollection(['RdGy','hot', 'summer', 'cool', 'Purples', 'YlGn', 'RdGy', 'PuOr'])}"
						 />
		</s:HGroup>
		
		<!--
		This is the treemap itself.
		
		TreeMapZoomControl allows the treemap to zoom into and out
		of selected subcategories.		
		-->
		<controls:TreeMapZoomControl tree="{treemap}" fontSize="16" color="#333333"/>
		
		<s:Group width="100%" height="100%">
			<s:HGroup id="treemapHBox" width="100%" height="100%">
				
				<!-- 
				The treemap itself.
				
				Currently the treemap can not use Flex 4 based fonts so fonts are set
				explicitly.
				
				-->

				<controls:TreeMapControl id="treemap"
										 width="100%"
										 height="100%" 
										 transitionPeriod="1.2"
										 styleFromDataRoot="true"

										 fontFamily="Arial"
										 fontSize="16"
										 labelEncodingField="name"
										 labelColorStrategy="glow"
										 truncateToFit="true"

										 palette="{paletteCmb.selectedItem}"
										 colorEncodingField="{colorCmb.selectedItem}"
										 sizeEncodingField="{sizeCmb.selectedItem}"

										 strokeColors="[0xffffff, 0xffffff, 0xffffff, 0x333333]"
										 strokeAlphas="[1,1,1,1]"
										 strokeThicknesses="[0,4,2,0.25]"/>
				
				<mx:Text id="selectedNode" width="250"/>
			</s:HGroup>
		</s:Group>
	</s:VGroup>
	
</s:Application>
